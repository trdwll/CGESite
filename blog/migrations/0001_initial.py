# Generated by Django 2.1.7 on 2019-04-05 08:23

import blog.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the category.', max_length=100)),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'db_table': 'blog_category',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(help_text='Title of the post.', max_length=100)),
                ('body', models.TextField(help_text='The content of the post. (<strong>Markdown Supported</strong>)')),
                ('image', models.ImageField(help_text='The image that will be displayed on the blog home page and on the post itself. (<strong>1280x720</strong>)', upload_to=blog.models.post_upload_path)),
                ('is_published', models.BooleanField(default=True, help_text='Do you want this post to be published publicly?')),
                ('slug', models.SlugField(unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_author', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='The category that the post will be listed under.', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Category')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'db_table': 'blog_post',
            },
        ),
    ]
